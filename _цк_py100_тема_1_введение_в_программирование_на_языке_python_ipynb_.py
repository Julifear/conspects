# -*- coding: utf-8 -*-
""""ЦК_PY100_Тема_1. Введение в программирование на языке Python.ipynb"

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ejkMOpMKjsFd1uxABuDxNwlbT3GYn5AG

# Краткий обзор аспектов языка Python. Установка и настройка среды разработки

## Введение в программирование на Python.

### Низко- и высокоуровневые языки программирования

**Язык программирования** это строго определенный набор правил,  
благодаря которому возможно взаимодействие человека с компьютером.

Язык программирования этот тот инструмент,  
с помощью которого вы можете управлять компьютером. 

Сам по себе компьютер делать ничего не умеет,  
результат его работы и того, что он умеет,  
это огромный труд большого количества программистов

Получается, чтобы компьютер начал понимать,  
что вы от него хотите в написанной вами программе  
с выбранным языком программирования, ему нужна ещё одна программа,  
которая будет понимать и выполнять ваш язык программирования.

Поэтому языки программирования делятся на:
- низкоуровневые, иначе говоря, полуфабрикат - язык, который делает "полукомпьютерный код", оттого его код понятнее компу
- высокоуровненые

![](https://drive.google.com/uc?id=1IisUQZPW7Hvv6B2ve__3wiD1TXohmGHS)

![](https://drive.google.com/uc?id=1w1cYcmFgkutYj2QAYtuLYsF9lww131K8)

Язык программирования Python относится к высокоуровневым языкам.

### Компилируемые и интерпретируемые языки программирования

Ещё языки программирования делятся на 
- компилируемые;
- интерпретируемые.

В **компилируемых** языках для преобразования исходного кода  
в машинный код используются специальные программы - компиляторы. 

Компиляторы преобразуют весь “человеческий” код в машинный  
перед началом работы, а на выходе получается новая скомпилированная программа,  
которую и выполняет компьютер.

Второй тип языков программирования - это **интерпретируемые**.  
Интерпретатор принимает удобный для восприятия человеком код и  
начинает построчно исполнять его, преобразуя каждую строку в машинный код. 

Отличие компилятора от интерпретатора в том,  
что последний не создает никакой новой программы,  
а просто берет каждую строку вашей программы,  
преобразует её в такую форму, которая понятна для выполнения компьютеру,  
и исполняет ее, а затем берет следующую инструкцию.  

Делать он будет это до тех пор пока не будут выполнены все строки  
вашего исходного файла либо не встретится команда,  
обозначающая конец интерпретации.

Отвечая на вопрос, какое же место язык Python  
занимает среди всех языков программирования?

**Python это высокоуровневый интерпретируемый кроссплатформенный язык программирования.**

## Интерпретаторы Python’а. Установка интерпретатора Python.

### Версии Python

До начала 2020 года существовало две принципиально разные версии python.  
Но Python версии 2 прекратил свою поддержку в январе 2020 году.  
Последняя версия 2.7.18 была выпущена в апреле 2020. 

Актуальной версией python является **Python 3**.  
Если у вас не стоит конкретной задачи, то однозначно выбирайте его.

:В данном курсе будем пользоваться версией **python 3.10**.

Первая цифра в версии (в нашем случае, это 3) - **это мажорная цифра**, которая символизирует саму начинку языка. Так, например, если язык программирования фиксят очень серьезно, то меняют именно эту цифру. Так, код с версии "2.//" запустится в "3.//", но код, написанный в "3.//" не запустится в "2.//", т.к. начинки у них уже принципиально разные и та, что новее, понятное дело не будет работать в старой, хотя и может прогружать коды из старой, потому что часть "начинки" старой версии всё ещё поддерживается. 

Вторая цифра в версии (в нашем случае, это 10) - это **минорная цифра**, которая символизирует какие-то неключевые исправления, которые на начинку не влияют, а лишь сверху в виде шоколадных крошек посыпаются..... а значит, эта цифра не про координальные изменения совместимости кода.

Третья цифра в версии (или буква) - стадия разработки
* Альфа версия - стадия тестирования приложения, число 0 или символ a
* Бета версия - стадия публичного тестирования приложения, число 1 или символ b
* RC (Release candidate) - релиз-кандидат - стадия-кандидат на то, чтобы стать стабильной версией, число 2 или символы rc
* RTM (Release To Manufacturing) - релиз - стабильная версия приложения, число 3 или символы rtm
* GA (General availability) - общедоступный релиз





**(!)** Причём важно ставить новую версию не только потому, что старые могут не поддерживаться создателями, но ещё и потому, что библиотеки и их обновления тоже рассчитаны на новые версии.

**(!)** несколько версий могут "жить вместе", н-р, 3.8 и 3.10

### Плюсы и минусы Python

Как и у любого языка программирования, у Python есть свои плюсы и минусы.

![](https://drive.google.com/uc?id=1vUa0DeofnXZvoMCjHgxfCVY-u2jac1d0)

- ***Минусы*** - интерпретируемый
(!) потребляемая память - это минус всех низкоуровневых языков

- ***Плюсы***: 
    - Простой и человекочитабельный **синтаксис**.  
    Это один из основных плюсов, которым python выделяется  
    среди остальных языков программирования.  
    Отлично подходит в качестве первого языка.
    - **Многогранность**.  
    Кроссплатформенный (Windows, Linux, Mac) и  
    множество сфер применения начиная от программирования микроконтроллеров  
    заканчивая алгоритмами машинного обучения и анализа данных.
    - **Обилие дополнительных библиотек**.  
    Богатая коллекция уже готовых решений неких задач другими программистами  
    с подробной документацией (справочник, описывающий,  
    как пользоваться языком программирования).

В целом, Python это как автомобиль “на каждый день”.  
Очень удобный и универсальный в использовании,  
но проигрывает в скорости менее комфортным и быстрым суперкарам.  
Вам не нужно очень долго учиться, сели и поехали. 

Уже через несколько занятий вы сможете писать  
свои собственные полноценные программы.  
Поэтому python является отличным языком программирования в качестве первого.
![](https://drive.google.com/uc?id=1Vmf4EOI7_hzPxYSLwDx39jIZqSJsJrGb)

### Где найти Python?

Официальный сайт [python.org](https://www.python.org/)

### Раздел "About"

**Раздел "About"** 
- [“Applications”](https://www.python.org/about/apps/) - тут есть\ "основная информация" о питоне
- [“Getting Started”](https://www.python.org/about/gettingstarted/)

![](https://drive.google.com/uc?id=1Vy4OOSIvatfxwm6qPeIpSGHBT02gQzmr)

### Раздел “Documentation”

**Раздел “Documentation”**
- [“Beginner's Guide”](https://wiki.python.org/moin/BeginnersGuide) 
- [“Developer’s Guide”](https://devguide.python.org/) - если хочется стать бородатым дядькой, который занимается написанием серьёзных программ
- [“PythonBooks”](https://wiki.python.org/moin/PythonBooks) - "список книг", которые позволят ворваться в работу с питоном! есть ссылки даже на русском) приятненько,
Mark Lutz - советуемая книжка, можно параллельно делать и читать ;)

![](https://drive.google.com/uc?id=16bKl6hUlYbp_XW86HVoPSdeevD1vCw6s)

### Раздел "Downloads"

Зачастую на Linux и MacOS python установлен на умолчанию.  
На Windows он не стоит по умолчанию.

Нет никаких ограничений, сколько версий python у вас может быть установлено.  
Также нет никаких проблем если у вас будут установлен python 2 и 3 версий.

Итак, скачать себе интерпретатор python можно с официального сайта  
в разделе [“Downloads”](https://www.python.org/downloads/).  
Если вам нужна какая-то специфическая версия,  
то её можно найти во вкладке “All releases”.
![](https://drive.google.com/uc?id=1_F0UM2Nxi2iKkWWS1KRhsNYM26_DfdEj)

Но и здесь существует несколько различных типов: 
- **Старые версии**, которые уже тоже закончили поддержку,  
например версии меньше версии python 3.6, включительно.  
Они постепенно перестают поддерживаться разработчиками,  
а значит нет гарантий, что обнаруженные уязвимости и ошибки будут исправлены.

- **Актуальные**, любая из версий 3.7, 3.8, 3.9, 3.10.  
Постепенно ранние версии так же прекращают свою поддержку,  
поэтому старайтесь пользоваться наиболее поздней из доступных версий.  

- **Версии, которые проходят тестирование** и готовятся к официальному выпуску.  
Такие версии находятся в стадии разработки,  
а следовательно подвержены возникновению большого  
количества ошибок и несовместимостей.  
Поэтому их не рекомендуется использовать в “боевых проектах”.

***Примечание***: Актуальную [информацию](https://devguide.python.org/#status-of-python-branches) о всех версиях  
можно узнать на официальном сайте Python.

## Знакомство со средами разработки.

Программа на языке Python представляет собой  
простой **текстовый файл с расширением .py**,  
который содержит исходный код.  
Далее этот файл нужно передать интерпретатору,  
чтобы он выполнил описанные вами инструкции.

Файл с исходным кодом на языке Python ещё называют **скриптом**.

Для написания простейшей программы вам подойдет даже блокнот. 

Но куда удобнее писать код в специализированных программах.

***Примечание***: [перечь](https://wiki.python.org/moin/PythonEditors) редакторов, которые поддерживают работу с python

### Интегрированная среда разработки

**IDE** - интегрированная среда разработки (англ. Integrated Development Environment). 

Простыми словами можно сказать, что это программы,  
которые позволяют писать другие программы.

***Примечание:***  
С перечнем IDE, позволяющих работать с python можно ознакомиться [здесь](https://wiki.python.org/moin/IntegratedDevelopmentEnvironments)

Для первого ознакомления можно выделить несколько популярных IDE: 
- PyCharm
- Spyder
- Visual Studio
- Eclipse + PyDev. 

Сравнительный анализ IDE для python можно посмотреть [здесь](https://tproger.ru/translations/python-ide/): 

![](https://drive.google.com/uc?id=1iv66Aov92w5s6jEraRlOIM4ndGpRN5X9)

IDE состоит из трех основных объектов:
- **текстового редактора**, который позволяет писать код;
- **транслятора** (в случае python это интерпретатор),  
который исполняет ваш код;
- **отладчик**, который позволяет пошагово изучить вашу программу  
и облегчить поиск ошибки.

В рамках данного курса мы будем работать  
с программным обеспечением компании [JetBrains](https://jetbrains.ru/), а конкретно IDE PyCharm. 

Существует две версии данного продукта: 
- Professional Edition
- Community Edition (CE). 

[Ссылка](https://www.jetbrains.com/ru-ru/pycharm/) для скачивания IDE PyCharm

## Краткий обзор аспектов языка (Дзен Python’а).

PEP (англ. Python Enhancement Proposal) - это [предложения](https://www.python.org/dev/peps/) по развитию питона.

Процесс PEP является основным механизмом для предложения  
**новых возможностей** и для **документирования** проектных решений,  
которые прошли в Python.

- PEP20
- PEP8

### PEP20

**PEP20** - [Дзен](https://www.python.org/dev/peps/pep-0020/) Python

Разработчики языка Python придерживаются  
определённой философии программирования,  
называемой **«The Zen of Python»** («Дзен Питона», или «Дзен Пайтона»).

В целом она подходит к программированию на любом языке.
"""

# Её текст выдаётся интерпретатором Python по команде:
import this

"""**Перевод «The Zen of Python»**

1. Красивое лучше, чем уродливое.
1. **Явное лучше, чем неявное.**
1. **Простое лучше, чем сложное.**
1. Сложное лучше, чем запутанное.
1. Плоское лучше, чем вложенное.
1. Разреженное лучше, чем плотное.
1. **Читаемость имеет значение.**
1. Особые случаи не настолько особые, чтобы нарушать правила.
1. При этом практичность важнее безупречности.
1. **Ошибки никогда не должны замалчиваться.**
1. Если они не замалчиваются явно.
1. Встретив двусмысленность, отбрось искушение угадать.
1. Должен существовать один и, желательно, только один очевидный способ сделать это.
1. Хотя он поначалу может быть и не очевиден, если вы не голландец.
1. Сейчас лучше, чем никогда.
1. Хотя никогда зачастую лучше, чем прямо сейчас.
1. **Если реализацию сложно объяснить — идея плоха.**
1. Если реализацию легко объяснить — идея, возможно, хороша.
1. Пространства имён — отличная штука! Будем делать их больше!

**"Так их же 19!" а PEP по счету 20???**

В этом заключается философский подтекст -  
Никакие правила не возводить в абсолют.  
Здесь каждый может определить для себя свой принцип и будет прав.

### PEP8

PEP8 - руководство по написанию кода на Python.
- [английская версия](https://www.python.org/dev/peps/pep-0008/)
- [русская версия](https://pythonworld.ru/osnovy/pep-8-rukovodstvo-po-napisaniyu-koda-na-python.html)

Документ описывает соглашение о том,  
как писать код для языка Python.  
Ключевая идея такова: **код читается намного больше раз, чем пишется**.

Данное руководство носит рекомендательный характер!!!
"""